// <auto-generated />
using GolfTracker.Data;
using GolfTracker.Models.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace GolfTracker.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180517170703_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GolfTracker.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<Guid>("AddressId");

                    b.Property<string>("Avatar");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GolfTracker.Models.CourseData.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AddressId");

                    b.Property<string>("Name");

                    b.HasKey("CourseId");

                    b.HasIndex("AddressId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("GolfTracker.Models.CourseData.CourseTee", b =>
                {
                    b.Property<Guid>("CourseTeeId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CourseId");

                    b.Property<Guid>("HandicapDataId");

                    b.Property<string>("Name");

                    b.HasKey("CourseTeeId");

                    b.HasIndex("CourseId");

                    b.HasIndex("HandicapDataId")
                        .IsUnique();

                    b.ToTable("CourseTee");
                });

            modelBuilder.Entity("GolfTracker.Models.CourseData.HandicapData", b =>
                {
                    b.Property<Guid>("HandicapDataId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BackRating");

                    b.Property<int>("BackSlope");

                    b.Property<int>("CourseSlope");

                    b.Property<double>("FrontRating");

                    b.Property<int>("FrontSlope");

                    b.HasKey("HandicapDataId");

                    b.ToTable("HandicapData");
                });

            modelBuilder.Entity("GolfTracker.Models.CourseData.Hole", b =>
                {
                    b.Property<Guid>("HoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CourseTeeId");

                    b.Property<string>("Name");

                    b.Property<int>("Number");

                    b.Property<int>("Par");

                    b.Property<int>("Yardage");

                    b.HasKey("HoleId");

                    b.HasIndex("CourseTeeId");

                    b.ToTable("Hole");
                });

            modelBuilder.Entity("GolfTracker.Models.EquipmentData.Club", b =>
                {
                    b.Property<Guid>("ClubId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand");

                    b.Property<string>("GripSize");

                    b.Property<string>("GripType");

                    b.Property<double>("Length");

                    b.Property<double>("Lie");

                    b.Property<double>("Loft");

                    b.Property<string>("Model");

                    b.Property<string>("ShaftFlex");

                    b.Property<string>("ShaftType");

                    b.HasKey("ClubId");

                    b.ToTable("Club");
                });

            modelBuilder.Entity("GolfTracker.Models.EquipmentData.ClubInSet", b =>
                {
                    b.Property<Guid>("ClubInSetId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClubId");

                    b.Property<Guid>("SetId");

                    b.HasKey("ClubInSetId");

                    b.HasIndex("ClubId");

                    b.HasIndex("SetId");

                    b.ToTable("ClubInSet");
                });

            modelBuilder.Entity("GolfTracker.Models.EquipmentData.Set", b =>
                {
                    b.Property<Guid>("SetId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UserId");

                    b.HasKey("SetId");

                    b.HasIndex("UserId");

                    b.ToTable("Set");
                });

            modelBuilder.Entity("GolfTracker.Models.RoundData.HolePlayed", b =>
                {
                    b.Property<Guid>("HolePlayedId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FairwayInRegulation");

                    b.Property<bool>("GreenInRegulation");

                    b.Property<Guid>("HoleId");

                    b.Property<string>("Notes");

                    b.Property<int>("NumberOfPutts");

                    b.Property<Guid>("RoundId");

                    b.Property<int>("SandSave");

                    b.Property<int>("Score");

                    b.Property<int>("UpAndDown");

                    b.HasKey("HolePlayedId");

                    b.HasIndex("HoleId");

                    b.HasIndex("RoundId");

                    b.ToTable("HolePlayed");
                });

            modelBuilder.Entity("GolfTracker.Models.RoundData.Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CourseTeeId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Notes");

                    b.Property<int>("RoundDetailType");

                    b.Property<int>("RoundLengthType");

                    b.Property<int>("RoundLocationType");

                    b.Property<Guid>("SetId");

                    b.Property<string>("UserId");

                    b.HasKey("RoundId");

                    b.HasIndex("CourseTeeId");

                    b.HasIndex("SetId");

                    b.HasIndex("UserId");

                    b.ToTable("Round");
                });

            modelBuilder.Entity("GolfTracker.Models.Shared.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("State");

                    b.Property<string>("Street1");

                    b.Property<string>("Street2");

                    b.Property<string>("ZipCode");

                    b.HasKey("AddressId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("GolfTracker.Models.UserData.HandicapHistory", b =>
                {
                    b.Property<Guid>("HandicapHistoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("BiMonthlyUpdate");

                    b.Property<DateTime>("Date");

                    b.Property<double>("Handicap");

                    b.Property<string>("UserId");

                    b.HasKey("HandicapHistoryId");

                    b.HasIndex("UserId");

                    b.ToTable("HandicapHistory");
                });

            modelBuilder.Entity("GolfTracker.Models.UserData.HomeCourse", b =>
                {
                    b.Property<Guid>("HomeCourseId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CourseId");

                    b.Property<string>("UserId");

                    b.HasKey("HomeCourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("HomeCourse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GolfTracker.Models.ApplicationUser", b =>
                {
                    b.HasOne("GolfTracker.Models.Shared.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GolfTracker.Models.CourseData.Course", b =>
                {
                    b.HasOne("GolfTracker.Models.Shared.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GolfTracker.Models.CourseData.CourseTee", b =>
                {
                    b.HasOne("GolfTracker.Models.CourseData.Course", "Course")
                        .WithMany("CourseTees")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GolfTracker.Models.CourseData.HandicapData", "HandicapData")
                        .WithOne("CourseTee")
                        .HasForeignKey("GolfTracker.Models.CourseData.CourseTee", "HandicapDataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GolfTracker.Models.CourseData.Hole", b =>
                {
                    b.HasOne("GolfTracker.Models.CourseData.CourseTee", "CourseTee")
                        .WithMany("Holes")
                        .HasForeignKey("CourseTeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GolfTracker.Models.EquipmentData.ClubInSet", b =>
                {
                    b.HasOne("GolfTracker.Models.EquipmentData.Club", "Club")
                        .WithMany("Sets")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GolfTracker.Models.EquipmentData.Set", "Set")
                        .WithMany("ClubsInSet")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GolfTracker.Models.EquipmentData.Set", b =>
                {
                    b.HasOne("GolfTracker.Models.ApplicationUser", "User")
                        .WithMany("ClubSets")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GolfTracker.Models.RoundData.HolePlayed", b =>
                {
                    b.HasOne("GolfTracker.Models.CourseData.Hole", "Hole")
                        .WithMany("HolesPlayed")
                        .HasForeignKey("HoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GolfTracker.Models.RoundData.Round", "Round")
                        .WithMany("HolesPlayed")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GolfTracker.Models.RoundData.Round", b =>
                {
                    b.HasOne("GolfTracker.Models.CourseData.CourseTee", "CourseTee")
                        .WithMany()
                        .HasForeignKey("CourseTeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GolfTracker.Models.EquipmentData.Set", "Set")
                        .WithMany("Rounds")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GolfTracker.Models.ApplicationUser", "User")
                        .WithMany("Rounds")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GolfTracker.Models.UserData.HandicapHistory", b =>
                {
                    b.HasOne("GolfTracker.Models.ApplicationUser", "User")
                        .WithMany("HandicapHistory")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GolfTracker.Models.UserData.HomeCourse", b =>
                {
                    b.HasOne("GolfTracker.Models.CourseData.Course", "Course")
                        .WithMany("HomeCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GolfTracker.Models.ApplicationUser", "User")
                        .WithMany("HomeCourses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GolfTracker.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GolfTracker.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GolfTracker.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GolfTracker.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
